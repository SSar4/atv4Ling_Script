/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Usuario = /*#__PURE__*/function () {\n  function Usuario(email, senha) {\n    _classCallCheck(this, Usuario);\n\n    this.email = email;\n    this.senha = senha;\n  }\n\n  _createClass(Usuario, [{\n    key: \"isAdmin\",\n    value: function isAdmin() {\n      if (this.Admin) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return Usuario;\n}();\n\nvar Admin = /*#__PURE__*/function (_Usuario) {\n  _inherits(Admin, _Usuario);\n\n  var _super = _createSuper(Admin);\n\n  function Admin(email, senha) {\n    var _this;\n\n    _classCallCheck(this, Admin);\n\n    _this = _super.call(this, email, senha);\n    _this.email = email;\n    _this.senha = senha;\n    _this.Admin = true;\n    return _this;\n  }\n\n  return Admin;\n}(Usuario);\n\nvar User1 = new Usuario('luma@gmail.com', '123');\nvar Adm1 = new Admin('luz@gmail.com', '1w2');\nconsole.log(User1.isAdmin());\nconsole.log(Adm1.isAdmin()); //ATIVIDADE 2\n\nvar usuarios = [{\n  nome: 'Diego',\n  idade: 23,\n  empresa: 'Rocketseat'\n}, {\n  nome: 'Gabriel',\n  idade: 15,\n  empresa: 'Rocketseat'\n}, {\n  nome: 'Lucas',\n  idade: 30,\n  empresa: 'Facebook'\n}]; //2.1\n\nconsole.log('2.1');\nvar tdsIdades = usuarios.map(function (obj) {\n  return obj.idade;\n});\nconsole.table(tdsIdades); //2.2\n\nconsole.log('2.2');\nvar FuncionarioMaioresDe18 = usuarios.filter(function (elem) {\n  return elem.empresa == 'Rocketseat' && elem.idade > 18;\n});\nconsole.table(FuncionarioMaioresDe18); //2.3\n\nconsole.log('2.3');\nvar ProcuraFuncionario = usuarios.find(function (elem) {\n  return elem.empresa == 'Google';\n});\nconsole.log(ProcuraFuncionario); //2.4\n\nvar FuncionariosIdadeMultiplicada = usuarios.filter(function (elem) {\n  if (elem.idade * 2 < 50) {\n    elem.idade = elem.idade * 2;\n    return elem;\n  }\n});\nconsole.log('2.4');\nconsole.table(FuncionariosIdadeMultiplicada); //EXERCICIO 3\n// 3.1\n\nvar arr = [1, 2, 3, 4, 5];\narr.map(function (item) {\n  return item + 10;\n});\nconsole.log(arr); // 3.2\n\nvar usuario = {\n  nome: 'Diego',\n  idade: 23\n};\n\nvar mostraIdade = function mostraIdade(usuario) {\n  return usuario.idade;\n};\n\nconsole.log(mostraIdade(usuario)); // 3.3\n// Dica: Utilize uma constante pra function\n\nvar nome = \"Diego\";\nvar idade = 23;\n\nvar mostraUsuario = function mostraUsuario() {\n  var nome = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Diego';\n  var idade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  return {\n    nome: nome,\n    idade: idade\n  };\n};\n\nconsole.log(mostraUsuario(nome, idade));\nconsole.log(mostraUsuario(nome)); // 3.4\n\nvar promise = function promise() {\n  return new Promise(function (resolve, reject) {\n    return resolve();\n  });\n};\n\nconsole.log(promise()); //EXERCICIO 4\n//4.1\n\nconsole.log('\\n\\n destruturação simples');\nvar empresa = {\n  nomeEmp: 'Rocketseat',\n  endereco: {\n    cidade: 'Rio do Sul',\n    estado: 'SC'\n  }\n};\nvar nomeEmp = empresa.nomeEmp,\n    _empresa$endereco = empresa.endereco,\n    cidade = _empresa$endereco.cidade,\n    estado = _empresa$endereco.estado;\nconsole.log(nomeEmp);\nconsole.log(cidade);\nconsole.log(estado); //4.2\n\nconsole.log('\\n\\ndestruturação por parametros');\n\nfunction mostraInfo(_ref) {\n  var nome = _ref.nome,\n      idade = _ref.idade;\n  return \"\".concat(nome, \" tem \").concat(idade, \" anos.\");\n}\n\nconsole.log(mostraInfo({\n  nome: 'Diego',\n  idade: 23\n})); //EXERCICIO 5\n//5.1\n\nvar x = arr[0],\n    y = arr.slice(1);\nconsole.log(x);\nconsole.log(y);\n\nfunction soma() {\n  for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n    params[_key] = arguments[_key];\n  }\n\n  return params.reduce(function (total, next) {\n    return total + next;\n  });\n}\n\nconsole.log(soma(1, 2, 3, 4, 5, 6));\nconsole.log(soma(1, 2)); //5.2\n\nvar usuario1 = {\n  nome: 'Diego',\n  idade: 23,\n  endereco: {\n    cidade: 'Rio do Sul',\n    uf: 'SC',\n    pais: 'Brasil'\n  }\n};\n\nvar usuario2 = _objectSpread(_objectSpread({}, usuario1), {}, {\n  nome: \"Gabriel\"\n});\n\nvar usuario3 = _objectSpread(_objectSpread({}, usuario1), {}, {\n  endereco: {\n    cidade: \"Lontras\"\n  }\n});\n\nconsole.log(usuario2);\nconsole.log(usuario3); //EXERCICIO 6\n\nvar user = 'Diego';\nvar age = 23; //console.log('O usuário ' + usuario + ' possui ' + idade + ' anos');\n\nconsole.log(\"O usu\\xE1rio \".concat(user, \" possui \").concat(age, \" anos\")); //EXERCICIO 7\n//OBS: AProveitando as variaveis de cima, user e age\n//const nome = 'Diego';\n//const idade = 23;\n\nvar usuario4 = {\n  user: user,\n  age: age,\n  cidade: 'Rio do Sul'\n};\nconsole.log(usuario4);\n\n//# sourceURL=webpack://Atividade-01/./main.js?");
/******/ })()
;